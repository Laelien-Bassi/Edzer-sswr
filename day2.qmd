## Point Pattern data

### Learning goals

* Understand spatial data structures used in R
* Understand what a point pattern and a point process is
* Understand what an observation window is
* Get familiar with the tools used in point pattern data analysis
* See the alignment with MaxEnt

### Reading materials

From [Spatial Data Science: with applications in R](https://r-spatial.org/book/): 

* Chapter 11: Point Patterns
* Chapter 7: `sf` and `stars`

## Exercises for Today

* Exercises of Ch 11: Point Patterns

::: {.callout-tip title="Summary"}

* Intro to `sf` and `stars`
* Intro to `spatstat`
* Point patterns, density functions
* Interactions in point processes
* Simulating point process
* Modelling density as a function of external variables

:::

## Intro to `sf` and `stars`

* Briefly: `sf` provides classes and methods for _simple features_
    * a feature is a "thing", with geometrical properties (point(s), line(s), polygon(s)) and attributes
    * `sf` stores data in `data.frame`s with a list-column (of class `sfc`) that holds the geometries

::: {.callout-tip title="the Simple Feature standard"}

"Simple Feature Access" is an [open standard](https://www.ogc.org/standard/sfa/) for data
with vector geometries. It defines a set of classes for geometries and operations on them.

* "simple" refers to curves that are "simply" represented by points connected by straight lines
* connecting lines are not allowed to [self-intersect](https://r-spatial.org/book/03-Geometries.html#sec-valid)
* polygons can have holes, and have validity constraints: holes cannot extrude the outer ring etc.
* All spatial software uses this: ArcGIS, QGIS, PostGIS, other spatial databases, ...

:::

### Why do all functions in `sf` start with `st_`?

* see [here](https://ecoevo.social/@noamross/112055449473807578)

### The larger geospatial open source ecosystem

R and beyond:

```{r fig-gdal-fig-nodetails, echo = FALSE}
#| code-fold: true
#| out.width: '100%'
#| fig.cap: "**sf** and its dependencies; arrows indicate strong dependency, dashed arrows weak dependency"
knitr::include_graphics("sf_deps.png") 
```

### `sf` operators, how to understand?

`sf` has objects at three nested "levels":

* `sfg`: a single geometry (without coordinate reference system)
* `sfc`: a set of `sfg` geometries, with a coordinate reference system
* `sf`: a `data.frame` or tibble with at least one geometry (`sfc`) column

* Operations _not_ involving geometry (`data.frame`; base R; tidyverse)
    * geometry column + `sf` class is sticky!
    * this can be convenient, and sometimes annoying
    * use `as.data.frame` or `as_tibble` to strip the `sf` class label
* Operations involving _only_ geometry
    * **predicates** (resulting `TRUE`/`FALSE`)
	    * unary
		* binary: [DE9-IM](https://en.wikipedia.org/wiki/DE-9IM); work on two sets, result `sgbp`, which is a sparse logical matrix representation
		    * is_within_distance
    * **measures**
        * unary: length, area
        * binary: distance, `by_element = FALSE`
    * **transformers**
		* unary: buffer, centroid 
        * binary: intersection, union, difference, symdifference
        * n-ary: intersection, difference
* Operations involving geometry _and_ attributes
    * many of the above!
    * `st_join`
    * `aggregate`
	* `st_interpolate_aw`: requires expression whether variable is spatially _extensive_ or _intensive_

## `sf` and `spatstat`

We can try to convert an `sf` object to a `ppp` (point pattern object in `spatstat`):
```{r error=TRUE}
library(sf)
library(spatstat)
demo(nc, echo = FALSE, ask = FALSE)
pts = st_centroid(st_geometry(nc))
as.ppp(pts) # ???
```

Note that `sf` interprets a `NA` CRS as: flat, projected (Cartesian) space.

### Why is this important?

```{r}
(p1 = st_point(c(0, 0)))
(p2 = st_point(c(1, 0)))
st_distance(p1, p2)
st_sfc(p1, crs = 'OGC:CRS84')
st_distance(st_sfc(p1, crs = 'OGC:CRS84'), st_sfc(p2, crs = 'OGC:CRS84'))
(p1 = st_point(c(0, 80)))
(p2 = st_point(c(1, 80)))
st_distance(p1, p2)
st_distance(st_sfc(p1, crs = 'OGC:CRS84'), st_sfc(p2, crs = 'OGC:CRS84'))
```

Also areas:
```{r}
p = st_as_sfc("POLYGON((0 80, 120 80, 240 80, 0 80))")
st_area(p)
st_area(st_sfc(p, crs = 'OGC:CRS84')) |> units::set_units(km^2)
pole = st_as_sfc("POINT(0 90)")
st_intersects(pole, p)
st_intersects(st_sfc(pole, crs = 'OGC:CRS84'), st_sfc(p, crs = 'OGC:CRS84'))
```

What to do with `nc`? Project to $R^2$ (flat space):
```{r}
nc |> st_transform('EPSG:32119') |> st_centroid() -> pts
pts
(pp = as.ppp(pts))
st_as_sf(pp)
```

### Breakout session

Compute the distance between `POINT(10 -90)` and `POINT(50 -90)`:

1. assuming these are coordinates in a a Cartesian space
2. assuming these are geodetic coordinates

## Intro to `spatstat`

Consider a point pattern that consist of 

* a set of known coordinates
* an observation window

We can ask ourselves: our point **pattern** be a realisation of a _completely spatially random_ (CSR) **process**? A CSR process
has 

1. a spatially constant intensity (_mean_: first order property)
2. completely independent locations (_interactions_: second order property)

e.g.

```{r}
library(spatstat)
set.seed(13431)
CSR = rpoispp(100)
plot(CSR)
```

Or does it have a non-constant intensity, but otherwise independent points?

```{r}
ppi = rpoispp(function(x,y,...) 500 * x)
plot(ppi, main = "inhomogeneous")
```

Or does it have constant intensity, but dependent points:

```{r}
cl <- rThomas(100, .02, 5)
plot(cl, main = "clustered")
```

```{r}
hc <- rHardcore(0.05,1.5,square(50)) 
plot(hc, main = "inhibition")
```

or a combination:

```{r}
#ff <- function(x,y) { 4 * exp(2 * abs(x) - 1) }
ff <- function(x,y) 10 * x
Z <- as.im(ff, owin())
Y <- rMatClust(10, 0.05, Z)
plot(Y)
```

## Checking homogeneity

```{r}
(q = quadrat.test(CSR))
plot(q)
(q = quadrat.test(ppi))
plot(q)
```

## Estimating density

* main parameter: bandwidth (`sigma`): determines the amound of smoothing.
* if `sigma` is not specified: uses `bw.diggle`, an automatically tuned bandwidth

Correction for `edge` effect?

```{r}
density(CSR) |> plot()
plot(CSR, add = TRUE, col = 'green')
density(ppi) |> plot()
plot(ppi, add = TRUE, col = 'green')
density(ppi, sigma = .05) |> plot()
plot(ppi, add = TRUE, col = 'green')
```

## Assessing interactions: clustering/inhibition

The K-function ("Ripley's K") is the expected number of additional
random (CSR) points within a distance r of a typical random point
in the observation window.

The G-function (nearest neighbour distance distribution) is the cumulative distribution function G of the distance from a typical random point of X to the nearest other point of X.

```{r}
envelope(CSR, Lest) |> plot()
envelope(cl, Lest) |> plot()
envelope(hc, Lest) |> plot()
envelope(ppi, Lest) |> plot()
envelope(ppi, Linhom) |> plot()
envelope(Y , Lest) |> plot()
envelope(Y , Linhom) |> plot()
```


## Fitting models to clustered data
```{r}
# assuming Inhomogeneous Poisson:
ppm(ppi, ~x)
# assuming Inhomogeneous clustered:
kppm(Y, ~x)
```


## Further reading

* E. Pebesma, 2018. Simple Features for R: Standardized Support for Spatial Vector Data. The R Journal 10:1, [439-446](https://journal.r-project.org/archive/2018/RJ-2018-009/index.html).
* A. Baddeley, E. Rubak and R Turner, 2016. Spatial Point Patterns: methodology and Applications in R; Chapman and Hall/CRC 810 pages.
* J. Illian, A. Penttinen, H. Stoyan and D. Stoyan, 2008. Statistical Analysis and Modelling of Spatial Point Patterns; Wiley, 534 pages.

::: {.callout-tip title="MaxEnt"}

It seems that
[MaxEnt](https://biodiversityinformatics.amnh.org/open_source/maxent/) fits
an [inhomogeneous Poisson process](https://nsojournals.onlinelibrary.wiley.com/doi/full/10.1111/ecog.03049) 

Starting from presence (only) observations, it

* adds background (absence) points, uniformly _in space_
* fits logistic regression models to the 0/1 data, using environmental covariates
* ignores spatial interactions, spatial distances
* will be discussed on Day 4: **Machine Learning methods applied to spatial data**

A paper detailing the equivalence and differences between point pattern models and MaxEnt is found [here](https://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.12352).

:::

