[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spatial Statistics with R",
    "section": "",
    "text": "Introduction",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#required-packages",
    "href": "index.html#required-packages",
    "title": "Spatial Statistics with R",
    "section": "Required packages",
    "text": "Required packages\nThe following packages may be used during the course; it is assumed that you know how to install packages, and have permission to do so on your computer.\nCRAN packages:\n\ninstall.packages(c(\"classInt\",\n\"colorspace\",\n\"dplyr\",\n\"ggplot2\",\n\"gstat\",\n\"hglm\",\n\"igraph\",\n\"lme4\",\n\"lwgeom\",\n\"maps\" ,\n\"mapview\",\n\"randomForest\",\n\"rnaturalearth\",\n\"s2\",\n\"scales\",\n\"sf\",\n\"sp\",\n\"spacetime\",\n\"spdep\",\n\"spatialreg\",\n\"spatstat\",\n\"spData\",\n\"stars\",\n\"terra\",\n\"tidyverse\",\n\"tmap\",\n\"units\",\n\"viridis\",\n\"viridisLite\",\n\"xts\"))\n\nnon-CRAN packages:\n\ninstall.packages(\"spDataLarge\", repos = \"https://nowosad.github.io/drat/\", \n                 type = \"source\")\ninstall.packages(\"starsdata\", repos = \"http://cran.uni-muenster.de/pebesma/\", \n                 type = \"source\")\n\nIntroduction to the course\n\nintroduction of the tutor\nintroduction of course participants, please state\n\nname,\nwhere you’re from,\nwhat kind of spatial data analysis you have done so far\n\n\nHow we work\n\nlive sessions are from 15:00-18:00 CET (Berlin time)\n\n3 blocks of 50 min + 10 mins break\nplease raise hands or speak up whenever something comes up\n\n\nslack communication during the full week\nplease share questions you run into in your actual research, preferably with (example) data and R code\nplease use the open channels in slack, so that everyone can learn from q + a’s\nResources\n\n\nSpatial Data Science: With applications in R, by Pebesma and Bivand 2023 (open online)\nVignettes of sf: tab “Articles”\nVignettes of stars: tab “Articles”\nAll these material are written using R-markdown (or quarto)",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#why-r-for-spatial-statistics",
    "href": "index.html#why-r-for-spatial-statistics",
    "title": "Spatial Statistics with R",
    "section": "Why R for spatial statistics?",
    "text": "Why R for spatial statistics?\n\nR is old! Think of the advantages!\nR is as good as any data science language, but is more in focus with the statistical community\nMost researchers in spatial statistics who share code have used or use R\nR has a strong ecosystem of users and developers, who communicate and collaborate (and compete, mostly in a good way)\nR spatial packages have gone full cycle:\n\nthe first generation has been deprecated\nremoved from CRAN, and\nreplaced by modern versions\n\n\nR is a data science language that allows you to work reproducibly\n\nBecause we have CRAN and CRAN Taskviews: Spatial, SpatioTemporal, Tracking\n\n\nReproducing the current course\n\nGo to https://github.com/edzer/sswr/\n\nGo to “Code”, “copy URL to clipboard”\nClone this repo to your hard drive\nStart one of the qmd files by double clicking, or on the command line with RStudio, or using some other tooling\nRun the code sections!",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "day1.html",
    "href": "day1.html",
    "title": "\n1  Introduction to spatial data\n",
    "section": "",
    "text": "Learning goals",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to spatial data</span>"
    ]
  },
  {
    "objectID": "day1.html#what-is-special-about-spatial-data",
    "href": "day1.html#what-is-special-about-spatial-data",
    "title": "\n1  Introduction to spatial data\n",
    "section": "\n1.1 What is special about spatial data?",
    "text": "1.1 What is special about spatial data?\n\n\nCoordinates. What are coordinates? Dimension(s)?\n\nLocation. Does location always involve coordinates?\n\nTime. If not explicit, there is an implicit time reference. Dimension(s)?\n\nAttributes. at specific locations we measure specific properties\nQuite often, we want to know where things change (space-time interactions).\n\nReference systems for space, time, and attributes: what are they?\n\nSupport: if we have an attribute value associated with a line, polygon or grid cell:\n\ndoes the value summarise all values at points? (line/area/cell support), or\nis the value constant throughout the line/area/cell (point support)?\n\n\n\nContinuity:\n\nis a variable spatially continuous? Yes for geostatitical data, no for point patterns\nis an attribute variable continuous? Stevens’s measurement scales: yes if Interval or Ratio.\n\n\n\nSupport: examples\n\nRoad properties\n\nroad type: gravel, brick, asphalt (point support: everywhere on the whole road)\nmean width: block support (summary value)\nminimum width: block support (although the minimum width may be the value at a single (point) location, it summarizes all widths of the road–we no longer know the width at any specific point location)\n\n\nLand use/land cover\n\nwhen we classify e.g. 30 m x 30 m Landsat pixels into a single class, this single class is not constant throughout this pixel\nroad type is a land cover type, but a road never covers a 30 m x 30 m pixel\na land cover type like “urban” is associated with a positive (non-point) support: we don’t say a point in a garden or park is urban, or a point on a roof, but these are part of a (block support) urban fabric\n\n\nElevation\n\nin principle, we can measure elevation at a point; in practice, every measuring device has a physical (non-point) size\n\n\nFurther reading: Chapter 5: Attributes and Support",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to spatial data</span>"
    ]
  },
  {
    "objectID": "day1.html#spatial-vs.-geospatial",
    "href": "day1.html#spatial-vs.-geospatial",
    "title": "\n1  Introduction to spatial data\n",
    "section": "\n1.2 Spatial vs. Geospatial",
    "text": "1.2 Spatial vs. Geospatial\n\nSpatial refers (physical) spaces, 2- or 3-dimensional (\\(R^2\\) or \\(R^3\\))\n\nMost often spatial statistics considers 2-dimensional problems\n3-d: meteorology, climate science, geophysics, groundwater hydrology, aeronautics, …\n\n\n“Geo” refers to the Earth\nFor Earth coordinates, we always need a datum, consisting of an ellipsoid (shape) and the way it is fixed to the Earth (origin)\n\nThe Earth is modelled by an ellipsoid, which is nearly round\nIf we consider Earth-bound areas as flat, for larger areas we get the distances wrong\nWe can (and do) also work on \\(S^2\\), the surface of a sphere, rather than \\(R^2\\), to get distances right, but this creates a number of challenges (such as plotting on a 2D device)\n\n\nNon-geospatial spaces could be:\n\nAssociated with other bodies (moon, Mars)\nAstrophysics, places/directions in the universe\nLocations in a building (where we use “engineering coordinates”, relative to a building corner and orientation)\nMicroscope images\nMRT scans (3-D), places in a human body\nlocations on a genome?\n\n\n\n\nCodelibrary(rnaturalearth)\nlibrary(sf)\n# Linking to GEOS 3.12.1, GDAL 3.8.3, PROJ 9.3.1; sf_use_s2() is TRUE\npar(mar = c(2,2,0,0) + .1)\nne_countries() |&gt; st_geometry() |&gt; plot(axes=TRUE)\n\n\n\nworld map, with longitude and latitude map linearly to x and y (Plate Caree)\n\n\n\n\n\n\n\n\n\nWhat is Statistics\n\n\n\n… or what are statistics?\n\nstatistic: a descriptive measure summarising some data\nStatistics: a scientific disciplin aiming at modelling data, using probability theory\n\nwhere does randomness come from? Design-based vs. model-based\nare parameters random or fixed? Bayesian vs. frequentist\ninference, prediction, simulations\n\n\nTypical approach: observation = signal + noise, noise modelled by random variables\n\n\n\nDesign-based statistics\nIn design-based statistics, randomness comes from random sampling. Consider an area \\(B\\), from which we take samples \\[z(s),\ns \\in B,\\] with \\(s\\) a location for instance two-dimensional: \\(s_i =\n\\{x_i,y_i\\}\\). If we select the samples randomly, we can consider \\(S \\in B\\) a random variable, and \\(z(S)\\) a random sample. Note the randomness in \\(S\\), not in \\(z\\).\nTwo variables \\(z(S_1)\\) and \\(z(S_2)\\) are independent if \\(S_1\\) and \\(S_2\\) are sampled independently. For estimation we need to know the inclusion probabilities, which need to be non-negative for every location.\nIf inclusion probabilities are constant (simple random sampling; or complete spatial randomness: day 2, point patterns) then we can estimate the mean of \\(Z(B)\\) by the sample mean \\[\\frac{1}{n}\\sum_{j=1}^n\nz(s_j).\\] This also predicts the value of a randomly chosen observation \\(z(S)\\). It cannot be used to predict the value \\(z(s_0)\\) for a non-randomly chosen location \\(s_0\\); for this we need a model.\nModel-based statistics\nModel-based statistics assumes randomness in the measured responses; consider a regression model \\(y = X\\beta + e\\), where \\(e\\) is a random variable and as a consequence \\(y\\), the response variable is a random variable. In the spatial context we replace \\(y\\) with \\(z\\), and capitalize it to indicate it is a random variable, and write \\[Z(s) = X(s)\\beta + e(s)\\] to stress that\n\n\n\\(Z(s)\\) is a random function (random variables \\(Z\\) as a function of \\(s\\))\n\n\\(X(s)\\) is the matrix with covariates, which depend on \\(s\\)\n\n\n\\(\\beta\\) are (spatially) constant coefficients, not depening on \\(s\\)\n\n\n\\(e(s)\\) is a random function with mean zero and covariance matrix \\(\\Sigma\\)\n\n\nIn the regression literature this is called a (linear) mixed model, because \\(e\\) is not i.i.d. If \\(e(s)\\) contains an iid component \\(\\epsilon\\) we can write this as\n\\[Z(s) = X(s)\\beta + w(s) + \\epsilon\\]\nwith \\(w(s)\\) the spatial signal, and a noise compenent e.g. due to measurement error.\nPredicting \\(Z(s_0)\\) will involve (GLS) estimation of \\(\\beta\\), but also prediction of \\(e(s_0)\\) using correlated, nearby observations (day 3: geostatistics).\nDesign- or model-based?\n\ndesign-based requires a random sample, if that is the case it needs no further assumptions\nmodel-based requires stationarity assumptions to estimate \\(\\Sigma\\)\n\nmodel-based is typically more effective for interpolation problems\ndesign-based can be most effective when estimation e.g. average mapping errors\nUsing coordinates as covariates?\n\n(day 4)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to spatial data</span>"
    ]
  },
  {
    "objectID": "day1.html#spatial-statistics-data-types",
    "href": "day1.html#spatial-statistics-data-types",
    "title": "\n1  Introduction to spatial data\n",
    "section": "\n1.3 Spatial statistics: data types",
    "text": "1.3 Spatial statistics: data types\nPoint Patterns\n\nPoints (locations) + observation window\nExample from here\n\n\n\n\n\n\n\n\n\nFigure 1.1: Wind turbine parks in Germany\n\n\n\n\n\nThe locations contain the information\nPoints may have (discrete or continuous) marks (attributes)\nThe observation window is, apart from the points, empty\n\nGeostatistical data",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to spatial data</span>"
    ]
  },
  {
    "objectID": "day1.html#data-types-that-received-less-attention-in-the-spatial-statistics-literature",
    "href": "day1.html#data-types-that-received-less-attention-in-the-spatial-statistics-literature",
    "title": "\n1  Introduction to spatial data\n",
    "section": "\n2.1 Data types that received less attention in the spatial statistics literature",
    "text": "2.1 Data types that received less attention in the spatial statistics literature\nImage data\n\nCodelibrary(stars)\n# Loading required package: abind\nplot(L7_ETMs, rgb = 1:3)\n\n\n\nRGB image from a Landsat scene\n\n\n\n\nare these geostatistical data, or areal data?\nIf we identify objects from images, can we see them as point patterns?\nTracking data, trajectories\n\nCode# from: https://r-spatial.org/r/2017/08/28/nest.html\nlibrary(tidyverse)\n# ── Attaching core tidyverse packages ──────────── tidyverse 2.0.0 ──\n# ✔ dplyr     1.1.4     ✔ readr     2.1.5\n# ✔ forcats   1.0.0     ✔ stringr   1.5.1\n# ✔ lubridate 1.9.3     ✔ tibble    3.2.1\n# ✔ purrr     1.0.2     ✔ tidyr     1.3.1\n# ── Conflicts ────────────────────────────── tidyverse_conflicts() ──\n# ✖ dplyr::filter() masks stats::filter()\n# ✖ dplyr::lag()    masks stats::lag()\n# ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nstorms.sf &lt;- storms %&gt;%\n    st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326)\nstorms.sf &lt;- storms.sf %&gt;% \n    mutate(time = as.POSIXct(paste(paste(year,month,day, sep = \"-\"), \n                                   paste(hour, \":00\", sep = \"\")))) %&gt;% \n    select(-month, -day, -hour)\nstorms.nest &lt;- storms.sf %&gt;% group_by(name, year) %&gt;% nest\nto_line &lt;- function(tr) st_cast(st_combine(tr), \"LINESTRING\") %&gt;% .[[1]] \ntracks &lt;- storms.nest %&gt;% pull(data) %&gt;% map(to_line) %&gt;% st_sfc(crs = 4326)\nstorms.tr &lt;- storms.nest %&gt;% select(-data) %&gt;% st_sf(geometry = tracks)\nstorms.tr %&gt;% ggplot(aes(color = year)) + geom_sf()\n\n\n\nStorm/hurricane trajectories colored by year\n\n\n\n\nA temporal snapshot (time slice) of a set of moving things forms a point pattern\nWe often analyse trajectories by\n\nestimating densities, for space-time blocks, per individual or together\nanalyising interactions (alibi problem, mating animals, home range, UDF etc)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to spatial data</span>"
    ]
  },
  {
    "objectID": "day1.html#checklist-if-you-have-spatial-data",
    "href": "day1.html#checklist-if-you-have-spatial-data",
    "title": "\n1  Introduction to spatial data\n",
    "section": "\n2.2 Checklist if you have spatial data",
    "text": "2.2 Checklist if you have spatial data\n\nDo you have the spatial coordinates of your data?\nAre the coordinates Earth-bound?\nIf yes, do you have the coordinate reference system of them?\nWhat is the support (physical size) of your observations?\nWere the data obtained by random sampling, and if yes, do you have sampling weights?\nDo you know the extent (\\(B\\)) from which your data were sampled, or collected?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to spatial data</span>"
    ]
  },
  {
    "objectID": "day1.html#exercises-for-day-2",
    "href": "day1.html#exercises-for-day-2",
    "title": "\n1  Introduction to spatial data\n",
    "section": "\n2.3 Exercises for Day 2",
    "text": "2.3 Exercises for Day 2\nSee day 2 slides.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to spatial data</span>"
    ]
  },
  {
    "objectID": "day1.html#further-reading",
    "href": "day1.html#further-reading",
    "title": "\n1  Introduction to spatial data\n",
    "section": "\n2.4 Further reading",
    "text": "2.4 Further reading\n\nRipley, B. 1981. Spatial Statistics. Wiley.\nCressie, N. 1993. Statistics for Spatial Data. Wiley.\nCochran, W.G. 1977. Sampling Techniques. Wiley.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to spatial data</span>"
    ]
  },
  {
    "objectID": "day2.html",
    "href": "day2.html",
    "title": "\n2  Point Pattern data\n",
    "section": "",
    "text": "Learning goals",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day2.html#exercises-for-today",
    "href": "day2.html#exercises-for-today",
    "title": "\n2  Point Pattern data\n",
    "section": "\n2.1 Exercises for Today",
    "text": "2.1 Exercises for Today\n\nExercises of Ch 11: Point Patterns\n\n\n\n\n\n\n\nSummary\n\n\n\n\nIntro to sf and stars\n\nIntro to spatstat\n\nPoint patterns, density functions\nInteractions in point processes\nSimulating point process\nModelling density as a function of external variables",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day2.html#intro-to-sf-and-stars",
    "href": "day2.html#intro-to-sf-and-stars",
    "title": "\n2  Point Pattern data\n",
    "section": "\n2.2 Intro to sf and stars\n",
    "text": "2.2 Intro to sf and stars\n\n\nBriefly: sf provides classes and methods for simple features\n\na feature is a “thing”, with geometrical properties (point(s), line(s), polygon(s)) and attributes\n\nsf stores data in data.frames with a list-column (of class sfc) that holds the geometries\n\n\n\n\n\n\n\n\n\nthe Simple Feature standard\n\n\n\n“Simple Feature Access” is an open standard for data with vector geometries. It defines a set of classes for geometries and operations on them.\n\n“simple” refers to curves that are “simply” represented by points connected by straight lines\nconnecting lines are not allowed to self-intersect\n\npolygons can have holes, and have validity constraints: holes cannot extrude the outer ring etc.\nAll spatial software uses this: ArcGIS, QGIS, PostGIS, other spatial databases, …\n\n\n\nWhy do all functions in sf start with st_?\n\nsee here\n\nThe larger geospatial open source ecosystem\nR and beyond:\n\n\n\n\n\n\n\nFigure 2.1: sf and its dependencies; arrows indicate strong dependency, dashed arrows weak dependency\n\n\n\n\n\nsf operators, how to understand?\nsf has objects at three nested “levels”: * sfg: a single geometry (without coordinate reference system) * sfc: a set of sfg geometries, with a coordinate reference system * sf: a data.frame or tibble with at least one geometry (sfc) column\n\nOperations not involving geometry (data.frame; base R; tidyverse)\n\ngeometry column + sf class is sticky!\nthis can be convenient, and sometimes annoying\nuse as.data.frame or as_tibble to strip the sf class label\n\n\nOperations involving only geometry\n\n\npredicates (resulting TRUE/FALSE)\n\nunary\nbinary: DE9-IM; work on two sets, result sgbp, which is a sparse logical matrix representation\n\nis_within_distance\n\n\n\n\n\nmeasures\n\nunary: length, area\nbinary: distance, by_element = FALSE\n\n\n\n\ntransformers\n\nunary: buffer, centroid\nbinary: intersection, union, difference, symdifference\nn-ary: intersection, difference\n\n\n\n\nOperations involving geometry and attributes\n\nmany of the above!\nst_join\naggregate\n\nst_interpolate_aw: requires expression whether variable is spatially extensive or intensive",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day2.html#sf-and-spatstat",
    "href": "day2.html#sf-and-spatstat",
    "title": "\n2  Point Pattern data\n",
    "section": "\n2.3 sf and spatstat\n",
    "text": "2.3 sf and spatstat\n\nWe can try to convert an sf object to a ppp (point pattern object in spatstat):\n\nlibrary(sf)\n# Linking to GEOS 3.12.1, GDAL 3.8.3, PROJ 9.3.1; sf_use_s2() is TRUE\nlibrary(spatstat)\n# Loading required package: spatstat.data\n# Loading required package: spatstat.geom\n# spatstat.geom 3.2-9\n# Loading required package: spatstat.random\n# spatstat.random 3.2-3\n# Loading required package: spatstat.explore\n# Loading required package: nlme\n# spatstat.explore 3.2-6\n# Loading required package: spatstat.model\n# Loading required package: rpart\n# spatstat.model 3.2-10\n# Loading required package: spatstat.linnet\n# spatstat.linnet 3.1-4\n# \n# spatstat 3.0-7 \n# For an introduction to spatstat, type 'beginner'\ndemo(nc, echo = FALSE, ask = FALSE)\npts = st_centroid(st_geometry(nc))\nas.ppp(pts) # ???\n# Error: Only projected coordinates may be converted to spatstat\n# class objects\n\nNote that sf interprets a NA CRS as: flat, projected (Cartesian) space.\nWhy is this important?\n\n(p1 = st_point(c(0, 0)))\n# POINT (0 0)\n(p2 = st_point(c(1, 0)))\n# POINT (1 0)\nst_distance(p1, p2)\n#      [,1]\n# [1,]    1\nst_sfc(p1, crs = 'OGC:CRS84')\n# Geometry set for 1 feature \n# Geometry type: POINT\n# Dimension:     XY\n# Bounding box:  xmin: 0 ymin: 0 xmax: 0 ymax: 0\n# Geodetic CRS:  WGS 84 (CRS84)\n# POINT (0 0)\nst_distance(st_sfc(p1, crs = 'OGC:CRS84'), st_sfc(p2, crs = 'OGC:CRS84'))\n# Units: [m]\n#        [,1]\n# [1,] 111195\n(p1 = st_point(c(0, 80)))\n# POINT (0 80)\n(p2 = st_point(c(1, 80)))\n# POINT (1 80)\nst_distance(p1, p2)\n#      [,1]\n# [1,]    1\nst_distance(st_sfc(p1, crs = 'OGC:CRS84'), st_sfc(p2, crs = 'OGC:CRS84'))\n# Units: [m]\n#       [,1]\n# [1,] 19309\n\nAlso areas:\n\np = st_as_sfc(\"POLYGON((0 80, 120 80, 240 80, 0 80))\")\nst_area(p)\n# [1] 0\nst_area(st_sfc(p, crs = 'OGC:CRS84')) |&gt; units::set_units(km^2)\n# 1620544 [km^2]\n\nWhat to do with nc? Project to \\(R^2\\) (flat space):\n\nnc |&gt; st_transform('EPSG:32119') |&gt; st_centroid() -&gt; pts\n# Warning: st_centroid assumes attributes are constant over\n# geometries\npts\n# Simple feature collection with 100 features and 14 fields\n# Attribute-geometry relationships: constant (6), aggregate (8)\n# Geometry type: POINT\n# Dimension:     XY\n# Bounding box:  xmin: 149000 ymin: 36500 xmax: 898000 ymax: 306000\n# Projected CRS: NAD83 / North Carolina\n# First 10 features:\n#     AREA PERIMETER CNTY_ CNTY_ID        NAME  FIPS FIPSNO CRESS_ID\n# 1  0.114      1.44  1825    1825        Ashe 37009  37009        5\n# 2  0.061      1.23  1827    1827   Alleghany 37005  37005        3\n# 3  0.143      1.63  1828    1828       Surry 37171  37171       86\n# 4  0.070      2.97  1831    1831   Currituck 37053  37053       27\n# 5  0.153      2.21  1832    1832 Northampton 37131  37131       66\n# 6  0.097      1.67  1833    1833    Hertford 37091  37091       46\n# 7  0.062      1.55  1834    1834      Camden 37029  37029       15\n# 8  0.091      1.28  1835    1835       Gates 37073  37073       37\n# 9  0.118      1.42  1836    1836      Warren 37185  37185       93\n# 10 0.124      1.43  1837    1837      Stokes 37169  37169       85\n#    BIR74 SID74 NWBIR74 BIR79 SID79 NWBIR79                  geom\n# 1   1091     1      10  1364     0      19  POINT (385605 3e+05)\n# 2    487     0      10   542     3      12 POINT (419198 306144)\n# 3   3188     5     208  3616     6     260 POINT (458418 296669)\n# 4    508     1     123   830     2     145 POINT (876266 298782)\n# 5   1421     9    1066  1606     3    1197 POINT (752184 297618)\n# 6   1452     7     954  1838     5    1237 POINT (789602 291533)\n# 7    286     0     115   350     2     139 POINT (857738 297588)\n# 8    420     0     254   594     2     371 POINT (815437 301289)\n# 9    968     4     748  1190     2     844 POINT (689435 294013)\n# 10  1612     1     160  2038     5     176 POINT (498892 294730)\n(pp = as.ppp(pts))\n# Warning in as.ppp.sf(pts): only first attribute column is used for\n# marks\n# Marked planar point pattern: 100 points\n# marks are numeric, of storage type  'double'\n# window: rectangle = [148701, 898181] x [36519, 306144] units\nst_as_sf(pp)\n# Simple feature collection with 101 features and 2 fields\n# Geometry type: GEOMETRY\n# Dimension:     XY\n# Bounding box:  xmin: 149000 ymin: 36500 xmax: 898000 ymax: 306000\n# CRS:           NA\n# First 10 features:\n#    spatstat.geom..marks.x.  label                           geom\n# NA                      NA window POLYGON ((148701 36519, 898...\n# 1                    0.114  point           POINT (385605 3e+05)\n# 2                    0.061  point          POINT (419198 306144)\n# 3                    0.143  point          POINT (458418 296669)\n# 4                    0.070  point          POINT (876266 298782)\n# 5                    0.153  point          POINT (752184 297618)\n# 6                    0.097  point          POINT (789602 291533)\n# 7                    0.062  point          POINT (857738 297588)\n# 8                    0.091  point          POINT (815437 301289)\n# 9                    0.118  point          POINT (689435 294013)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day2.html#intro-to-spatstat",
    "href": "day2.html#intro-to-spatstat",
    "title": "\n2  Point Pattern data\n",
    "section": "\n2.4 Intro to spatstat\n",
    "text": "2.4 Intro to spatstat\n\nConsider a point pattern that consist of\n\na set of known coordinates\nan observation window\n\nWe can ask ourselves: our point pattern be a realisation of a completely spatially random (CRS) process? A CRS process has\n\na spatially constant intensity (mean: first order property)\ncompletely independent locations (interactions: second order property)\n\ne.g.\n\nlibrary(spatstat)\nset.seed(13431)\nCRS = rpoispp(100)\nplot(CRS)\n\n\n\n\n\n\n\nOr does it have a non-constant intensity, but otherwise independent points?\n\nppi = rpoispp(function(x,y,...) 500 * x)\nplot(ppi, main = \"inhomogeneous\")\n\n\n\n\n\n\n\nOr does it have constant intensity, but dependent points:\n\ncl &lt;- rThomas(100, .02, 5)\nplot(cl, main = \"clustered\")\n\n\n\n\n\n\n\n\nhc &lt;- rHardcore(0.05,1.5,square(50)) \nplot(hc, main = \"inhibition\")\n\n\n\n\n\n\n\nor a combination:\n\n#ff &lt;- function(x,y) { 4 * exp(2 * abs(x) - 1) }\nff &lt;- function(x,y) 10 * x\nZ &lt;- as.im(ff, owin())\nY &lt;- rMatClust(10, 0.05, Z)\nplot(Y)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day2.html#checking-homogeneity",
    "href": "day2.html#checking-homogeneity",
    "title": "\n2  Point Pattern data\n",
    "section": "\n2.5 Checking homogeneity",
    "text": "2.5 Checking homogeneity\n\n(q = quadrat.test(CRS))\n# Warning: Some expected counts are small; chi^2 approximation may be\n# inaccurate\n# \n#   Chi-squared test of CSR using quadrat counts\n# \n# data:  CRS\n# X2 = 25, df = 24, p-value = 0.9\n# alternative hypothesis: two.sided\n# \n# Quadrats: 5 by 5 grid of tiles\nplot(q)\n\n\n\n\n\n\n(q = quadrat.test(ppi))\n# \n#   Chi-squared test of CSR using quadrat counts\n# \n# data:  ppi\n# X2 = 81, df = 24, p-value = 8e-08\n# alternative hypothesis: two.sided\n# \n# Quadrats: 5 by 5 grid of tiles\nplot(q)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day2.html#estimating-density",
    "href": "day2.html#estimating-density",
    "title": "\n2  Point Pattern data\n",
    "section": "\n2.6 Estimating density",
    "text": "2.6 Estimating density\n\nmain parameter: bandwidth (sigma): determines the amound of smoothing.\nif sigma is not specified: uses bw.diggle, an automatically tuned bandwidth\n\nCorrection for edge effect?\n\ndensity(CRS) |&gt; plot()\nplot(CRS, add = TRUE, col = 'green')\n\n\n\n\n\n\ndensity(ppi) |&gt; plot()\nplot(ppi, add = TRUE, col = 'green')\n\n\n\n\n\n\ndensity(ppi, sigma = .05) |&gt; plot()\nplot(ppi, add = TRUE, col = 'green')",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day2.html#assessing-interactions-clusteringinhibition",
    "href": "day2.html#assessing-interactions-clusteringinhibition",
    "title": "\n2  Point Pattern data\n",
    "section": "\n2.7 Assessing interactions: clustering/inhibition",
    "text": "2.7 Assessing interactions: clustering/inhibition\nThe K-function (“Ripley’s K”) is the expected number of additional random (CRS) points within a distance r of a typical random point in the observation window.\nThe G-function (nearest neighbour distance distribution) is the cumulative distribution function G of the distance from a typical random point of X to the nearest other point of X.\n\nenvelope(CRS, Lest) |&gt; plot()\n# Generating 99 simulations of CSR  ...\n# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n# 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n# 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n# 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n# 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n# 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n# 99.\n# \n# Done.\n\n\n\n\n\n\nenvelope(cl, Lest) |&gt; plot()\n# Generating 99 simulations of CSR  ...\n# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n# 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n# 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n# 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n# 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n# 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n# 99.\n# \n# Done.\n\n\n\n\n\n\nenvelope(hc, Lest) |&gt; plot()\n# Generating 99 simulations of CSR  ...\n# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n# 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n# 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n# 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n# 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n# 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n# 99.\n# \n# Done.\n\n\n\n\n\n\nenvelope(ppi, Lest) |&gt; plot()\n# Generating 99 simulations of CSR  ...\n# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n# 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n# 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n# 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n# 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n# 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n# 99.\n# \n# Done.\n\n\n\n\n\n\n#envelope(Y , Gest) |&gt; plot()\nenvelope(ppi, Kest) |&gt; plot()\n# Generating 99 simulations of CSR  ...\n# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n# 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n# 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n# 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n# 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n# 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n# 99.\n# \n# Done.\n\n\n\n\n\n\nenvelope(ppi, Kinhom) |&gt; plot()\n# Generating 99 simulations of CSR  ...\n# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n# 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n# 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n# 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n# 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n# 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n# 99.\n# \n# Done.\n\n\n\n\n\n\nenvelope(Y , Kest) |&gt; plot()\n# Generating 99 simulations of CSR  ...\n# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n# 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n# 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n# 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n# 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n# 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n# 99.\n# \n# Done.\n\n\n\n\n\n\nenvelope(Y , Kinhom) |&gt; plot()\n# Generating 99 simulations of CSR  ...\n# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n# 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n# 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n# 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n# 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n# 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n# 99.\n# \n# Done.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day2.html#fitting-models-to-clustered-data",
    "href": "day2.html#fitting-models-to-clustered-data",
    "title": "\n2  Point Pattern data\n",
    "section": "\n2.8 Fitting models to clustered data",
    "text": "2.8 Fitting models to clustered data\n\n# assuming Inhomogeneous Poisson:\nppm(ppi, ~x)\n# Nonstationary Poisson process\n# Fitted to point pattern dataset 'ppi'\n# \n# Log intensity:  ~x\n# \n# Fitted trend coefficients:\n# (Intercept)           x \n#        4.33        1.96 \n# \n#             Estimate  S.E. CI95.lo CI95.hi Ztest  Zval\n# (Intercept)     4.33 0.174    3.99    4.67   *** 24.91\n# x               1.96 0.247    1.48    2.45   ***  7.96\n# assuming Inhomogeneous clustered:\nkppm(Y, ~x)\n# Inhomogeneous cluster point process model\n# Fitted to point pattern dataset 'Y'\n# Fitted by minimum contrast\n#   Summary statistic: inhomogeneous K-function\n# \n# Log intensity:  ~x\n# \n# Fitted trend coefficients:\n# (Intercept)           x \n#        3.69        1.47 \n# \n# Cluster model: Thomas process\n# Fitted cluster parameters:\n# kappa scale \n# 7.731 0.038 \n# Mean cluster size:  [pixel image]\n# \n# Cluster strength: phi =  7.122\n# Sibling probability: psib =  0.8769",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day2.html#further-reading",
    "href": "day2.html#further-reading",
    "title": "\n2  Point Pattern data\n",
    "section": "\n2.9 Further reading",
    "text": "2.9 Further reading\n\nE. Pebesma, 2018. Simple Features for R: Standardized Support for Spatial Vector Data. The R Journal 10:1, 439-446.\nA. Baddeley, E. Rubak and R Turner, 2016. Spatial Point Patterns: methodology and Applications in R; Chapman and Hall/CRC 810 pages.\nJ. Illian, A. Penttinen, H. Stoyan and D. Stoyan, 2008. Statistical Analysis and Modelling of Spatial Point Patterns; Wiley, 534 pages.\n\n\n\n\n\n\n\nMaxEnt\n\n\n\nIt seems that MaxEnt fits an inhomogeneous Poisson process\nStarting from presence (only) observations, it\n\nadds background (absence) points, uniformly in space\n\nfits logistic regression models to the 0/1 data, using environmental covariates\nignores spatial interactions, spatial distances\nwill be discussed on Day 4: Machine Learning methods applied to spatial data\n\n\nA paper detailing the equivalence and differences between point pattern models and MaxEnt is found here.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Point Pattern data</span>"
    ]
  },
  {
    "objectID": "day3.html",
    "href": "day3.html",
    "title": "3  Geostatistical data",
    "section": "",
    "text": "Learning goals\n\nGet familiar with geostatistical data and spatial interpolation\nGet familiar with concepts of geostatistics: stationarity, variogram, kriging, conditional simulation\nGet an idea what spatiotemporal geostatistics is about\n\n\n\nReading materials\nFrom Spatial Data Science: with applications in R:\n\nChapter 12: Spatial Interpolation\nChapter 13: Multivariate and Spatiotemporal Geostatistics\n\n\n\nExercises for Today\n\nExercises of Ch 12: Spatial interpolation\n\n\n\n\n\n\n\nSummary\n\n\n\n\nIntro to gstat\nGeostatistical data\nSpatial correlation, variograms, stationarity\nKriging\nSimulating geostatistical data\nSpatiotemporal geostatistics\n\n\n\n\n\nSummary\n\nStationarity of mean, stationarity of covariance\nEstimating spatial covariance and semivariance\nModelling the variogram\nKriging interpolation\nConditional simulation",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Geostatistical data</span>"
    ]
  },
  {
    "objectID": "day4.html",
    "href": "day4.html",
    "title": "4  Machine Learning methods applied to spatial data",
    "section": "",
    "text": "Learning goals",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Machine Learning methods applied to spatial data</span>"
    ]
  },
  {
    "objectID": "day4.html#examples",
    "href": "day4.html#examples",
    "title": "4  Machine Learning methods applied to spatial data",
    "section": "4.1 Examples",
    "text": "4.1 Examples",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Machine Learning methods applied to spatial data</span>"
    ]
  },
  {
    "objectID": "day4.html#maxent",
    "href": "day4.html#maxent",
    "title": "4  Machine Learning methods applied to spatial data",
    "section": "4.2 MaxEnt",
    "text": "4.2 MaxEnt\n\nA statistical explanation of MaxEnt for Ecologists\nR package maxnet does that using glmnet (lasso or elasticnet regularization on",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Machine Learning methods applied to spatial data</span>"
    ]
  },
  {
    "objectID": "day5.html",
    "href": "day5.html",
    "title": "\n5  Big spatial datasets\n",
    "section": "",
    "text": "Learning goals",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Big spatial datasets</span>"
    ]
  },
  {
    "objectID": "day5.html#what-is-a-big-dataset",
    "href": "day5.html#what-is-a-big-dataset",
    "title": "\n5  Big spatial datasets\n",
    "section": "\n5.1 What is a big dataset?",
    "text": "5.1 What is a big dataset?\n\nWhat is big?\n\ntoo big to handle in main memory (with some copying) (Gb)\ntoo big to fit in memory (20 Gb)\ntoo big to download (Tb)\ntoo big to fit on the hard drive, or local file storage (10 Tb)\ntoo big to move (copy) to your institution (100 Tb - Pb)\n\n\nLarge vector datasets, examples\n\nall building footprints of a continents, link\n\nall rivers, e.g. of the US, link\n\nOpenStreetMap, link\n\nall agricultural parcels of a continent, e.g. EuroCrops\n\n\n\nLarge raster datasets, image collections and data cubes\n\nERA-5\nCMIP-6\nCopernicus (Sentinel-1, 2, 3, 5p, etc)\nLandsat, MODIS, …\n\n\nCloud solutions, cloud platforms, with platform lock-in\n\nArcGIS online\nSentinel Hub\nGoogle Earth Engine\nMicrosoft Planetary Computer\nEarth on Amazon (AWS US-west Oregon: COGS + STAC for S1 + S2)\nCopernicus Data Space Ecosystem (has openEO: a fully open source software stack)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Big spatial datasets</span>"
    ]
  },
  {
    "objectID": "day5.html#access-mechanism",
    "href": "day5.html#access-mechanism",
    "title": "\n5  Big spatial datasets\n",
    "section": "\n5.2 Access mechanism",
    "text": "5.2 Access mechanism\n\n\n\n\n\n\nClouds and object storage\n\n\n\nObject storage abstracts away hard drives and file systems!\n\ne.g. S3 bucket (AWS/OpenStack):\n\ntotal size is unlimited\nmaximum object size 5 Tb (AWS S3)\nidea: write once, read many times\nlarge objects: write piece-wise\nhttp range requests\nprice depends on size, access speed, amount of requests\ntabular data: Parquet\n\n\nlarge data processing: collocate processing and storage\n\navoid network between locations / data centers\nnetwork inside a data center is fast / cheap\n\n\n\n\n\n\nAPI: openEO, CDS,\npartial reads of data cubes: variable, bounding box, strided (low resolution), time period\nvector tiles: pmtiles, flatgeobuf",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Big spatial datasets</span>"
    ]
  },
  {
    "objectID": "day5.html#examples",
    "href": "day5.html#examples",
    "title": "\n5  Big spatial datasets\n",
    "section": "\n5.3 Examples",
    "text": "5.3 Examples\n\ncurl::curl_download(\n  \"https://github.com/paleolimbot/geoarrow-data/releases/download/v0.0.1/nshn_water_line.gpkg\",\n  \"nshn_water_line.gpkg\"\n)\n\n\nlibrary(sf)\n# Linking to GEOS 3.12.1, GDAL 3.8.3, PROJ 9.3.1; sf_use_s2() is TRUE\n\n\n(w &lt;- read_sf(\"nshn_water_line.gpkg\"))\n\nFrom https://github.com/microsoft/USBuildingFootprints downloaded Maine.geojson.zip, and read with\n\nm = st_read(\"/vsizip/Maine.geojson.zip\") # /vsizip: indicates data source is a zipped file\n\nor read directly from github into R:\n\nm = st_read(\"/vsizip/vsicurl/https://usbuildingdata.blob.core.windows.net/usbuildings-v2/Maine.geojson.zip\")\n# /vsicurl: indicates data source is a URL",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Big spatial datasets</span>"
    ]
  },
  {
    "objectID": "day5.html#spatial-statistics-on-large-datasets",
    "href": "day5.html#spatial-statistics-on-large-datasets",
    "title": "\n5  Big spatial datasets\n",
    "section": "\n5.4 Spatial statistics on large datasets",
    "text": "5.4 Spatial statistics on large datasets\nGeostatistics\n\nRandomForestsGLS\nspNNGP\nFRK\n\nA key paper comparing different approaches is Heaton, Matthew J., Abhirup Datta, Andrew O. Finley, Reinhard Furrer, Joseph Guinness, Rajarshi Guhaniyogi, Florian Gerber, et al. 2018. “A Case Study Competition Among Methods for Analyzing Large Spatial Data.” Journal of Agricultural, Biological and Environmental Statistics, December. DOI.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Big spatial datasets</span>"
    ]
  }
]